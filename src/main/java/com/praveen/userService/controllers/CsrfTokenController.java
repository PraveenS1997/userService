package com.praveen.userService.controllers;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

// CSRF - Cross-Site Request Forgery
// CSRF is an attack that tricks the victim into submitting a malicious request.
// It inherits the identity and privileges of the victim to perform an undesired function on their behalf.
// CSRF tokens are random values that are generated by the server and embedded in the form.
@RestController
public class CsrfTokenController {

    // This endpoint should be called to obtain a CSRF token when the application is launched
    // or initialized (e.g. at load time), and also after authentication success and logout success.
    // Refreshing the token after authentication success and logout success is required because
    // the CsrfAuthenticationStrategy and CsrfLogoutHandler will clear the previous token.
    // The client will not be able to perform an unsafe HTTP request, such as a POST, without obtaining a fresh token.
    @GetMapping("/csrf-token")
    public String getCsrfToken(HttpServletRequest request) {
        // After obtaining the token, the client should pass it in the header of the HTTP request or in the form data as a hidden field.
        CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class.getName());
        return csrf.getToken();
    }
}

// If you are building a REST API that is consumed by non-browser clients (e.g. mobile apps) or services, CSRF protection is not necessary.
// CSRF protection is primarily relevant for web applications where the client is a browser
// and is interacting with your application's frontend.
